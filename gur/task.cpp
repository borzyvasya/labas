#include <cstdlib>
#include <iostream>
#include <cmath>
using namespace std; // Чтобы не прописывать std::

// Структура для представления точки на шахматной доске (x, y)
struct PTS {
    int x;  // Координата по оси X
    int y;  // Координата по оси Y
};

// Прототип функции
bool checkMove(PTS move, PTS move2);

int main() {
    srand(time(NULL)); // Нужно, чтобы при каждом запуске программы выдавал новые случайные значения
    PTS firstMove;  // Первая точка (первая позиция)
    PTS secondMove; // Вторая точка (вторая позиция)

    firstMove.x = 4;  // Задаем значение координаты X для первой точки
    firstMove.y = 3;  // Задаем значение координаты Y для первой точки

    secondMove.x = rand() % 9; // Задаем значение координаты X для второй точки, от 0 до 8, т.к до 9 не включительно
    secondMove.y = rand() % 9; // Задаем значение координаты Y для второй точки, от 0 до 8, т.к до 9 не включительно

    // Выводим результат проверки хода
    cout << checkMove(firstMove, secondMove) << endl;

    return EXIT_SUCCESS;  // Завершаем программу с успешным кодом возврата
}

// Функция для проверки допустимости хода
// Проверяет, можно ли переместиться с точки move в точку move2 в рамках определенных условий
bool checkMove(PTS move, PTS move2) {
    int h = 8;  // Высота доски (8 клеток)
    int w = 8;  // Ширина доски (8 клеток)

    // Убедимся, что вторая точка находится в пределах доски
    return ((move2.x <= w && move2.y <= h) &&
        // Проверяем, что разница между координатами по оси X и Y соответствует правилам 
        (((1 <= abs(move2.x - move.x) <= 2) &&
            (1 <= abs(move2.y - move.y) <= 2)) &&
            // Убедимся, что сумма разницы координат по осям X и Y равна 3
            (abs(move2.x - move.x) + abs(move2.y - move.y) == 3))); // Вернет либо 0 (ложь) либо 1 (истина)
}
